<?php
/**
 * File Name: {{classname}}.php
 * Automatically generated by QHGC tool
 * @date: {{time}}
 * @version: {{version}}
 */


namespace {{namespace}};


use jan\basic\i18n;
use jan\validators\ArrayValidator;
use jan\validators\IdValidator;
use jan\web\Controller;
{{use_class}}

/**
 * Class {{classname}}
 * @package {{namespace}}
 * @description 数据表 {{table_name}} 的增删改查
 */
class {{classname}} extends Controller
{
    /**
     * 分页获取 {{table_name}} 表的数据
     * 可以通过传参控制筛选和排序
     * @return array 返回包含总数和结果集的数组
     */
    public function actionList()
    {
        $model = new {{model_class}}();
        $model->scenario = 'list';
        $model->autoAssign();
        if ($model->validate()) {
            $result = ['total' => 0, 'data' => []];
            list($result['total'], $result['data']) = {{model_class}}::find()
                ->setFilterSource($model->getScenarioAttrValues())
                ->orderBy($model->sorter)
                ->pagingList($model->page, $model->page_size, true, true);
            return $this->success($result);
        } else {
            return $this->fail($model->getLastError());
        }
    }

    /**
     * 在 {{table_name}} 表中新增一条数据
     */
    public function actionCreate()
    {
        $model = new {{model_class}}();
        $model->scenario = 'create';
        $model->autoAssign();
        if ($model->validate()) {
            $model->insert();
            return $this->success(true);
        } else {
            return $this->fail($model->getLastError());
        }
    }

    /**
     * 根据主键更新 {{table_name}} 表的单条数据
     * @param string|int ${{primary}} 记录的主键
     * @return mixed
     */
    public function actionUpdate(${{primary}})
    {
        $validator = new IdValidator();
        if (empty(${{primary}}) || !$validator->validateValue(${{primary}})) {
            return $this->fail(i18n::t('Data not found'));
        }
        $model = {{model_class}}::findOne(${{primary}});
        if (empty($model)) {
            return $this->fail(i18n::t('Data not found'));
        }
        $model->scenario = 'update';
        $model->autoAssign();
        if ($model->validate()) {
            $model->update();
            return $this->success(true);
        } else {
            return $this->fail($model->getLastError());
        }
    }

    /**
     * 根据主键删除 {{table_name}} 表的一条数据
     * @param string|int ${{primary}} 记录的主键
     * @return mixed
     */
    public function actionDelete(${{primary}})
    {
        $validator = new IdValidator();
        if (empty(${{primary}}) || !$validator->validateValue(${{primary}})) {
            return $this->fail(i18n::t('Data not found'));
        }
        $model = {{model_class}}::findOne(${{primary}});
        if (empty($model)) {
            return $this->fail(i18n::t('Data not found'));
        }

        // 真正的删除
        $model->delete();
        // 伪删除，这里改成你实际的删除标记字段
//        $model->del_time = time();
//        $model->update();

        return $this->success(true);
    }

    /**
     * 批量删除 {{table_name}} 表的数据
     */
    public function actionBulkDelete()
    {
        $validator = new ArrayValidator(['type' => 'id']);
        ${{primary}} = \Jan::$app->request->post('{{primary}}');
        if (empty(${{primary}}) || !$validator->validateValue(${{primary}})) {
            return $this->fail(i18n::t('Data not found'));
        }

        {{model_class}}::deleteAll(['id' => $id]);
        // 伪删除
//        {{model_class}}::updateAll(['del_time' => time()], ['id' => $id]);

        return $this->success(true);
    }

    /**
     * 获取 {{table_name}} 表单条记录
     * @param string|int ${{primary}} 记录的主键
     * @return array
     */
    public function actionDetail(${{primary}})
    {
        $validator = new IdValidator();
        if (empty(${{primary}}) || !$validator->validateValue(${{primary}})) {
            return $this->fail(i18n::t('Data not found'));
        }
        $result = {{model_class}}::findOne($id, true);
        if (empty($result)) {
            return $this->fail(i18n::t('Data not found'));
        } else {
            return $this->success($result);
        }
    }

    /**
     * 批量导出 tbl_ac_roles 的数据到指定类型的文件
     * 返回文件路径
     */
    public function actionExport()
    {
        $model = new {{model_class}}();
        $model->scenario = 'list';
        $model->autoAssign();
        if ($model->validate()) {
            $result = {{model_class}}::find()
                ->setFilterSource($model->getScenarioAttrValues())
                ->orderBy($model->sorter)
                ->asArray()
                ->all();
            if (empty($result)) {
                return $this->fail(i18n::t('Data not found'));
            }
            return $this->success($model->export($result));
        } else {
            return $this->fail($model->getLastError());
        }
    }
}
